Mini Project 1 - Analyzing eCommerce Business Performance with SQL
-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
BEGIN;

CREATE TABLE IF NOT EXISTS public.customers_dataset
(
    customer_id character varying COLLATE pg_catalog."default",
    customer_unique_id character varying COLLATE pg_catalog."default",
    customer_zip_code_prefix numeric,
    customer_city character varying COLLATE pg_catalog."default",
    customer_state character varying COLLATE pg_catalog."default"
);

CREATE TABLE IF NOT EXISTS public.geolocation_dataset
(
    geolocation_zip_code_prefix numeric,
    geolocation_lat character varying COLLATE pg_catalog."default",
    geolocation_lng character varying COLLATE pg_catalog."default",
    geolocation_city character varying COLLATE pg_catalog."default",
    geolocation_state character varying COLLATE pg_catalog."default"
);

CREATE TABLE IF NOT EXISTS public.order_items_dataset
(
    order_id character varying COLLATE pg_catalog."default",
    order_item_id numeric,
    product_id character varying COLLATE pg_catalog."default",
    seller_id character varying COLLATE pg_catalog."default",
    shipping_limit_date date,
    price numeric,
    freight_value numeric
);

CREATE TABLE IF NOT EXISTS public.order_payments_dataset
(
    order_id character varying COLLATE pg_catalog."default",
    payment_sequential numeric,
    payment_type character varying COLLATE pg_catalog."default",
    paymnet_installments numeric,
    payment_value numeric
);

CREATE TABLE IF NOT EXISTS public.order_reviews_dataset
(
    review_id character varying COLLATE pg_catalog."default",
    order_id character varying COLLATE pg_catalog."default",
    review_score numeric,
    review_comment_title character varying COLLATE pg_catalog."default",
    review_comment_message character varying COLLATE pg_catalog."default",
    review_creation_date date,
    review_answer_timestamp date
);

CREATE TABLE IF NOT EXISTS public.orders_dataset
(
    order_id character varying COLLATE pg_catalog."default",
    customer_id character varying COLLATE pg_catalog."default",
    order_status character varying COLLATE pg_catalog."default",
    order_purchase_timestamp date,
    order_approved_at date,
    order_delivered_carrier_date date,
    order_delivered_customer_date date,
    order_estimated_delivery_date date
);

CREATE TABLE IF NOT EXISTS public.product_dataset
(
    """""" numeric,
    product_id character varying COLLATE pg_catalog."default",
    product_category_name character varying COLLATE pg_catalog."default",
    product_name_lenght numeric,
    product_description_lenght numeric,
    product_photos_qty numeric,
    product_weight_g numeric,
    product_length_cm numeric,
    product_height_cm numeric,
    product_width_cm numeric
);

CREATE TABLE IF NOT EXISTS public.seller_dataset
(
    seller_id character varying COLLATE pg_catalog."default",
    seller_zip_code_prefix numeric,
    seller_city character varying COLLATE pg_catalog."default",
    seller_state character varying COLLATE pg_catalog."default"
);

ALTER TABLE IF EXISTS public.customers_dataset
    ADD FOREIGN KEY (customer_id)
    REFERENCES public.orders_dataset (customer_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.geolocation_dataset
    ADD FOREIGN KEY (geolocation_zip_code_prefix)
    REFERENCES public.seller_dataset (seller_zip_code_prefix) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.geolocation_dataset
    ADD FOREIGN KEY (geolocation_zip_code_prefix)
    REFERENCES public.customers_dataset (customer_zip_code_prefix) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.order_items_dataset
    ADD FOREIGN KEY (order_id)
    REFERENCES public.orders_dataset (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.orders_dataset
    ADD FOREIGN KEY (order_id)
    REFERENCES public.order_reviews_dataset (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.orders_dataset
    ADD FOREIGN KEY (order_id)
    REFERENCES public.order_payments_dataset (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.product_dataset
    ADD FOREIGN KEY (product_id)
    REFERENCES public.order_items_dataset (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.seller_dataset
    ADD FOREIGN KEY (seller_id)
    REFERENCES public.order_items_dataset (seller_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;


Task 2
-- 1. Calculate average monthly active users per year

select year, round(avg(total_customer),0) as avg_active_user
from
(select date_part('year', od.order_purchase_timestamp) as year,
 		date_part('month', od.order_purchase_timestamp) as month,
 		count(distinct cd.customer_unique_id) as total_customer
from orders_dataset as od
join customers_dataset as cd on od.customer_id = cd.customer_id
group by 1,2) a
group by 1;

--2. Calculate the number of new customers per year

select 
	date_part('year', first_time_order) as year, 
	count(a.customer_unique_id) as new_customers 
from (
        select 
			c.customer_unique_id,
            min(o.order_purchase_timestamp) as first_time_order
		from orders_dataset o
		inner join customers_dataset c on c.customer_id = o.customer_id
		group by 1
) as a
group by 1
order by 1;

--3. Calculate the number of customers who placed a repeat order per year

select year, count(total_customer) as repear_order
from
(select date_part('year', od.order_purchase_timestamp) as year,
 		cd.customer_unique_id,
 		count(cd.customer_unique_id) as total_customer,
 		count(od.order_id) as total_order
from orders_dataset as od
join customers_dataset as cd on od.customer_id = cd.customer_id
group by 1,2
having count(order_id) >1
) a
group by 1
order by 1;

--4. Calculate average orders per year

select year, round(avg(total_order),2) as avg_frequency_order
from
(select date_part('year', od.order_purchase_timestamp) as year,
 		cd.customer_unique_id,
 		count(distinct order_id) as total_order
from orders_dataset as od
join customers_dataset as cd on od.customer_id = cd.customer_id
group by 1,2
) a
group by 1
order by 1;

--5. Create a CTE (Common Table Expression) and combine all previous results

with count_mau as (
select year, round(avg(total_customer),0) as avg_active_user
from
(select date_part('year', od.order_purchase_timestamp) as year,
 		date_part('month', od.order_purchase_timestamp) as month,
 		count(distinct cd.customer_unique_id) as total_customer
from orders_dataset as od
join customers_dataset as cd on od.customer_id = cd.customer_id
group by 1,2) a
group by 1
),

count_newcust as(
select 
	date_part('year', first_time_order) as year, 
	count(a.customer_unique_id) as new_customers 
from (
        select 
			c.customer_unique_id,
            min(o.order_purchase_timestamp) as first_time_order
		from orders_dataset o
		inner join customers_dataset c on c.customer_id = o.customer_id
		group by 1
) as a
group by 1
order by 1
),

count_repeat_order as(
select year, count(total_customer) as repeat_order
from
(select date_part('year', od.order_purchase_timestamp) as year,
 		cd.customer_unique_id,
 		count(cd.customer_unique_id) as total_customer,
 		count(od.order_id) as total_order
from orders_dataset as od
join customers_dataset as cd on od.customer_id = cd.customer_id
group by 1,2
having count(order_id) >1
) a
group by 1
order by 1
),

avg_order as (
select year, round(avg(total_order),2) as avg_frequency_order
from
(select date_part('year', od.order_purchase_timestamp) as year,
 		cd.customer_unique_id,
 		count(distinct order_id) as total_order
from orders_dataset as od
join customers_dataset as cd on od.customer_id = cd.customer_id
group by 1,2
) a
group by 1
order by 1)

select 
cm.year,
cm.avg_active_user,
cn.new_customers,
cro.repeat_order,
ao.avg_frequency_order
from count_mau cm 
join count_newcust cn on cm.year=cn.year
join count_repeat_order cro on cm.year=cro.year
join avg_order ao on cm.year=ao.year;


Task 3
-- NO 1.  Calculate total revenue per year

create table total_revenue_per_year as
select 
	date_part('year', o.order_purchase_timestamp) as year,
	sum(revenue_per_order) as revenue
from (
	select 
		order_id, 
		sum(price+freight_value) as revenue_per_order
	from order_items_dataset
	group by 1
) subq
join orders_dataset o on subq.order_id = o.order_id
where o.order_status = 'delivered'
group by 1
order by 1;

-- NO 2. Calculate total canceled orders per year

create TABLE total_cancel_order_per_year AS
SELECT
	date_part('year',order_purchase_timestamp) as year,
	COUNT(o.order_id) AS total_cancel
FROM orders_dataset as o
WHERE order_status = 'canceled'
GROUP BY 1
ORDER BY 1;

-- NO 3. Calculate highest total revenues per product category per year

create table top_product_category_by_revenue_per_year as 
select 
	year, 
	product_category_name, 
	revenue 
from (
	select 
		date_part('year', o.order_purchase_timestamp) as year,
		p.product_category_name,
		sum(oi.price + oi.freight_value) as revenue,
		rank() over(
			partition by date_part('year', o.order_purchase_timestamp) 
	 order by 
	sum(oi.price + oi.freight_value) desc) as rk
	from order_items_dataset oi
	join orders_dataset o on o.order_id = oi.order_id
	join product_dataset p on p.product_id = oi.product_id
	where o.order_status = 'delivered'
	group by 1,2
) sq
where rk = 1;

-- NO 4 Calculate highest canceled order per product category per year

create table top_product_category_by_cancel_per_year as 
select 
	year, 
	product_category_name, 
	total_cancel 
from (
	select 
		date_part('year', o.order_purchase_timestamp) as year,
		p.product_category_name,
		count(o.order_id) as total_cancel,
		rank() over(
			partition by date_part('year', o.order_purchase_timestamp) 
	 order by 
	count(o.order_id) desc) as rk
	from order_items_dataset oi
	join orders_dataset o on o.order_id = oi.order_id
	join product_dataset p on p.product_id = oi.product_id
	where o.order_status = 'canceled'
	group by 1,2
) sq
where rk = 1;

-- NO 5 Create a new table which contain all the informations above

select 
        tpy.year,
		tpy.product_category_name AS top_product_category_by_revenue,
		tpy.revenue AS category_revenue,
		tr.revenue AS year_total_revenue,
		tcy.product_category_name AS most_canceled_product_category,
		tcy.total_cancel AS category_num_canceled,
		tco.total_cancel AS year_total_num_canceled
from top_product_category_by_revenue_per_year tpy
join total_revenue_per_year tr on tpy.year = tr.year
join top_product_category_by_cancel_per_year tcy on tpy.year = tcy.year
join total_cancel_order_per_year tco on tpy.year = tco.year


Task 4 
-- 1. Calculate the number of usage per payment method, sorted by most frequently used

select 
	op.payment_type,
	count(op.order_id) as num_used
from order_payments_dataset op 
join orders_dataset o on o.order_id = op.order_id
group by 1
order by 2 desc;

-- 2. Calculate annual payment type usage

with 
tmp as (
select 
	date_part('year', o.order_purchase_timestamp) as year,
	op.payment_type,
	count(1) as num_used
from order_payments_dataset op 
join orders_dataset o on o.order_id = op.order_id
group by 1, 2
) 

select *,
	case when year_2017 = 0 then NULL
		else round((year_2018 - year_2017) / year_2017, 2)
	end as pct_change_2017_2018
from (
select 
  payment_type,
  sum(case when year = '2016' then num_used else 0 end) as year_2016,
  sum(case when year = '2017' then num_used else 0 end) as year_2017,
  sum(case when year = '2018' then num_used else 0 end) as year_2018
from tmp 
group by 1) subq
order by 2;


